#import necessary libraries
library(sf)
library(terra)
library(dplyr)
library(spData)
library(spDataLarge)
library(rgdal)
library(tmap)    # for static and interactive maps
library(leaflet) # for interactive maps
library(ggplot2) # tidyverse data visualization package
library("ggplot2")
library("GGally")
library(sp)
library(spatialEco)
## == import global dataset, projected onto Amsterdam == ##
global = readOGR('C:/Users/foeke/OneDrive/Documenten/submitting paper/TooBigData/Grid100/Amsterdam_NO2PredictionPerModel.gpkg')
## == Amsterdam == ##
#coordinates relating to Amsterdam
y =  52.370216
x = 4.852168
#combine to make a point
Amsterdam_point <- cbind(x, y)
#converse to dataframe to make further data processing feasible
Amsterdam_point <- as.data.frame(Amsterdam_point)
#assign the coordinate values to the variabble xy
xy <- Amsterdam_point[,c(1,2)]
#make spatial - first converting it to a SpatialPointsDataFrame is feasible to make the data spatial
spdf <- SpatialPointsDataFrame(coords = xy, data = Amsterdam_point,
proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
#to sf - necessary for further data operations
Amsterdam_point <- st_as_sf(spdf)
##  First project data into a planar coordinate system (here 3035)
#apply variable as argument to project onto Amsterdam point
Amsterdam_point_32 <- st_transform(Amsterdam_point, crs=3035)
#Important: coordinates in m, adjust the units on function
rect_around_point <- function(x,xsize,ysize){
bbox <- st_bbox(x)
bbox <- bbox +c(xsize/2,ysize/2,-xsize/2,-ysize/2)
return(st_as_sfc(bbox))
}
#create rectangle relating to Amsterdam area (2nd and 3rd argument specify extent)
Amsterdam_square_buffer <- rect_around_point(Amsterdam_point_3035, 30000, 30000)
## == export option == ##
#sf::st_write(Amsterdam_square_buffer, dsn="C:/Users/foeke/OneDrive/Documenten/submitting paper/TooBigData/visualization/Amsterdam_square_buffer.gpkg", driver = "GPKG")
#spatial query - assign the data to the extent of Amsterdam which was defined above
sp_query_Amsterdam <-spatial.select(Amsterdam_square_buffer ,y = global,predicate = "contains")
#export option
#sf::st_write(sp_query_Amsterdam, dsn="C:/Users/foeke/OneDrive/Documenten/submitting paper/TooBigData/visualization/sp_query_Amsterdam.gpkg", driver = "GPKG")
## == maps == ##
#create list with variables to visualize
vars = c("p_NO2_RF","p_NO2_LA", "p_NO2_RI", "p_NO2_LG", "p_NO2_X", "no2")
#specify groups of no2 values
breaks = c(-100, 0, 15, 20, 25, 30, 35, 40, 45, 50, 100, 1000)
#manually define color palette: color x equals no2 value group y.
paleta1 <- c("grey", "palegreen4", "palegreen3","palegreen","greenyellow",  "yellow", "gold", "darkorange", "red", "darkred", "grey")
# loop through the shapefiles and create a map for each, save it too
for (i in 1:length(vars)) {
vars[i]
map <- tm_shape(sp_query_Amsterdam) + tm_fill(col = vars[i], breaks=breaks, palette=paleta1, legend.show = FALSE)
hi = vars[i]
tmap_save(map, width = 1000, height = 1000, units="px", filename = paste("C:/Users/foeke/OneDrive/Documenten/submitting paper/TooBigData/visualization/Amsterdam/Global_",hi,".jpg", sep=""))
}
#import necessary libraries
library(sf)
library(terra)
library(dplyr)
library(spData)
library(spDataLarge)
library(rgdal)
library(tmap)    # for static and interactive maps
library(leaflet) # for interactive maps
library(ggplot2) # tidyverse data visualization package
library("ggplot2")
library("GGally")
library(sp)
library(spatialEco)
## == import global dataset, projected onto Amsterdam == ##
global = readOGR('C:/Users/foeke/OneDrive/Documenten/submitting paper/TooBigData/Grid100/Amsterdam_NO2PredictionPerModel.gpkg')
## == Amsterdam == ##
#coordinates relating to Amsterdam
y =  52.370216
x = 4.852168
#combine to make a point
Amsterdam_point <- cbind(x, y)
#converse to dataframe to make further data processing feasible
Amsterdam_point <- as.data.frame(Amsterdam_point)
#assign the coordinate values to the variabble xy
xy <- Amsterdam_point[,c(1,2)]
#make spatial - first converting it to a SpatialPointsDataFrame is feasible to make the data spatial
spdf <- SpatialPointsDataFrame(coords = xy, data = Amsterdam_point,
proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
#to sf - necessary for further data operations
Amsterdam_point <- st_as_sf(spdf)
##  First project data into a planar coordinate system (here 3035)
#apply variable as argument to project onto Amsterdam point
Amsterdam_point_3035 <- st_transform(Amsterdam_point, crs=3035)
#Important: coordinates in m, adjust the units on function
rect_around_point <- function(x,xsize,ysize){
bbox <- st_bbox(x)
bbox <- bbox +c(xsize/2,ysize/2,-xsize/2,-ysize/2)
return(st_as_sfc(bbox))
}
#create rectangle relating to Amsterdam area (2nd and 3rd argument specify extent)
Amsterdam_square_buffer <- rect_around_point(Amsterdam_point_3035, 30000, 30000)
## == export option == ##
#sf::st_write(Amsterdam_square_buffer, dsn="C:/Users/foeke/OneDrive/Documenten/submitting paper/TooBigData/visualization/Amsterdam_square_buffer.gpkg", driver = "GPKG")
#spatial query - assign the data to the extent of Amsterdam which was defined above
sp_query_Amsterdam <-spatial.select(Amsterdam_square_buffer ,y = global,predicate = "contains")
#export option
#sf::st_write(sp_query_Amsterdam, dsn="C:/Users/foeke/OneDrive/Documenten/submitting paper/TooBigData/visualization/sp_query_Amsterdam.gpkg", driver = "GPKG")
## == maps == ##
#create list with variables to visualize
vars = c("p_NO2_RF","p_NO2_LA", "p_NO2_RI", "p_NO2_LG", "p_NO2_X", "no2")
#specify groups of no2 values
breaks = c(-100, 0, 15, 20, 25, 30, 35, 40, 45, 50, 100, 1000)
#manually define color palette: color x equals no2 value group y.
paleta1 <- c("grey", "palegreen4", "palegreen3","palegreen","greenyellow",  "yellow", "gold", "darkorange", "red", "darkred", "grey")
# loop through the shapefiles and create a map for each, save it too
for (i in 1:length(vars)) {
vars[i]
map <- tm_shape(sp_query_Amsterdam) + tm_fill(col = vars[i], breaks=breaks, palette=paleta1, legend.show = FALSE)
hi = vars[i]
tmap_save(map, width = 1000, height = 1000, units="px", filename = paste("C:/Users/foeke/OneDrive/Documenten/submitting paper/TooBigData/visualization/Amsterdam/Global_",hi,".jpg", sep=""))
}
sp_query_Amsterdam
global
#import necessary libraries
library(sf)
library(terra)
library(dplyr)
library(spData)
library(spDataLarge)
library(rgdal)
library(tmap)    # for static and interactive maps
library(leaflet) # for interactive maps
library(ggplot2) # tidyverse data visualization package
library("ggplot2")
library("GGally")
library(sp)
library(spatialEco)
## == import global dataset, projected onto Amsterdam == ##
global = readOGR('C:/Users/foeke/OneDrive/Documenten/submitting paper/TooBigData/Grid100/Amsterdam_NO2PredictionPerModel.gpkg')
## == Amsterdam == ##
#coordinates relating to Amsterdam
y =  52.370216
x = 4.852168
#combine to make a point
Amsterdam_point <- cbind(x, y)
#converse to dataframe to make further data processing feasible
Amsterdam_point <- as.data.frame(Amsterdam_point)
#assign the coordinate values to the variabble xy
xy <- Amsterdam_point[,c(1,2)]
#make spatial - first converting it to a SpatialPointsDataFrame is feasible to make the data spatial
spdf <- SpatialPointsDataFrame(coords = xy, data = Amsterdam_point,
proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
#to sf - necessary for further data operations
Amsterdam_point <- st_as_sf(spdf)
##  First project data into a planar coordinate system (here 3035)
#apply variable as argument to project onto Amsterdam point
Amsterdam_point_3035 <- st_transform(Amsterdam_point, crs=3035)
#Important: coordinates in m, adjust the units on function
rect_around_point <- function(x,xsize,ysize){
bbox <- st_bbox(x)
bbox <- bbox +c(xsize/2,ysize/2,-xsize/2,-ysize/2)
return(st_as_sfc(bbox))
}
#create rectangle relating to Amsterdam area (2nd and 3rd argument specify extent)
Amsterdam_square_buffer <- rect_around_point(Amsterdam_point_3035, 30000, 30000)
## == export option == ##
#sf::st_write(Amsterdam_square_buffer, dsn="C:/Users/foeke/OneDrive/Documenten/submitting paper/TooBigData/visualization/Amsterdam_square_buffer.gpkg", driver = "GPKG")
#spatial query - assign the data to the extent of Amsterdam which was defined above
sp_query_Amsterdam <-spatial.select(Amsterdam_square_buffer ,y = global,predicate = "contains")
#export option
#sf::st_write(sp_query_Amsterdam, dsn="C:/Users/foeke/OneDrive/Documenten/submitting paper/TooBigData/visualization/sp_query_Amsterdam.gpkg", driver = "GPKG")
## == maps == ##
sp_query_Amsterdam
#create list with variables to visualize
vars = c("predicted_NO2_RF", "predicted_NO2_LASSO", "predicted_NO2_RIDGE", "predicted_NO2_LightGBM", "predicted_NO2_XGBoost")
#specify groups of no2 values
breaks = c(-100, 0, 15, 20, 25, 30, 35, 40, 45, 50, 100, 1000)
#manually define color palette: color x equals no2 value group y.
palette_colors <- c("grey", "palegreen4", "palegreen3","palegreen","greenyellow",  "yellow", "gold", "darkorange", "red", "darkred", "grey")
# loop through the shapefiles and create a map for each, save it too
for (i in 1:length(vars)) {
vars[i]
map <- tm_shape(sp_query_Amsterdam) + tm_fill(col = vars[i], breaks=breaks, palette=palette_colors, legend.show = FALSE)
hi = vars[i]
tmap_save(map, width = 1000, height = 1000, units="px", filename = paste("C:/Users/foeke/OneDrive/Documenten/submitting paper/TooBigData/visualization/Amsterdam/Global_",hi,".jpg", sep=""))
#import necessary libraries
library(sf)
library(terra)
library(dplyr)
library(spData)
library(spDataLarge)
library(rgdal)
library(tmap)    # for static and interactive maps
library(leaflet) # for interactive maps
library(ggplot2) # tidyverse data visualization package
library("ggplot2")
library("GGally")
library(sp)
library(spatialEco)
## == import global dataset, projected onto Amsterdam == ##
global = readOGR('C:/Users/foeke/OneDrive/Documenten/submitting paper/TooBigData/Grid100/Amsterdam_NO2PredictionPerModel.gpkg')
## == Amsterdam == ##
#coordinates relating to Amsterdam
y =  52.370216
x = 4.852168
#combine to make a point
Amsterdam_point <- cbind(x, y)
#converse to dataframe to make further data processing feasible
Amsterdam_point <- as.data.frame(Amsterdam_point)
#assign the coordinate values to the variabble xy
xy <- Amsterdam_point[,c(1,2)]
#make spatial - first converting it to a SpatialPointsDataFrame is feasible to make the data spatial
spdf <- SpatialPointsDataFrame(coords = xy, data = Amsterdam_point,
proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
#to sf - necessary for further data operations
Amsterdam_point <- st_as_sf(spdf)
##  First project data into a planar coordinate system (here 3035)
#apply variable as argument to project onto Amsterdam point
Amsterdam_point_3035 <- st_transform(Amsterdam_point, crs=3035)
#Important: coordinates in m, adjust the units on function
rect_around_point <- function(x,xsize,ysize){
bbox <- st_bbox(x)
bbox <- bbox +c(xsize/2,ysize/2,-xsize/2,-ysize/2)
return(st_as_sfc(bbox))
}
#create rectangle relating to Amsterdam area (2nd and 3rd argument specify extent)
Amsterdam_square_buffer <- rect_around_point(Amsterdam_point_3035, 30000, 30000)
## == export option == ##
#sf::st_write(Amsterdam_square_buffer, dsn="C:/Users/foeke/OneDrive/Documenten/submitting paper/TooBigData/visualization/Amsterdam_square_buffer.gpkg", driver = "GPKG")
#spatial query - assign the data to the extent of Amsterdam which was defined above
sp_query_Amsterdam <-spatial.select(Amsterdam_square_buffer ,y = global,predicate = "contains")
#export option
#sf::st_write(sp_query_Amsterdam, dsn="C:/Users/foeke/OneDrive/Documenten/submitting paper/TooBigData/visualization/sp_query_Amsterdam.gpkg", driver = "GPKG")
## == maps == ##
sp_query_Amsterdam
#create list with variables to visualize
vars = c("predicted_NO2_RF", "predicted_NO2_LASSO", "predicted_NO2_RIDGE", "predicted_NO2_LightGBM", "predicted_NO2_XGBoost")
#specify groups of no2 values
breaks = c(-100, 0, 15, 20, 25, 30, 35, 40, 45, 50, 100, 1000)
#manually define color palette: color x equals no2 value group y.
palette_colors <- c("grey", "palegreen4", "palegreen3","palegreen","greenyellow",  "yellow", "gold", "darkorange", "red", "darkred", "grey")
# loop through the shapefiles and create a map for each, save it too
for (i in 1:length(vars)) {
print(vars[i])
map <- tm_shape(sp_query_Amsterdam) + tm_fill(col = vars[i], breaks=breaks, palette=palette_colors, legend.show = FALSE)
model = vars[i]
tmap_save(map, width = 1000, height = 1000, units="px", filename = paste("C:/Users/foeke/OneDrive/Documenten/submitting paper/TooBigData/visualization/Amsterdam/Global_",model,".jpg", sep=""))
}
#import necessary packages
library(sf)
library(terra)
library(dplyr)
library(spData)
library(spDataLarge)
library(rgdal)
library(tmap)    # for static and interactive maps
library(leaflet) # for interactive maps
library(ggplot2) # tidyverse data visualization package
library(spatialEco)
## == import spatial datasets == ##
#Bayreuth
grid100_Bayreuth = readOGR('C:/Users/foeke/OneDrive/Documenten/submitting paper/TooBigData/Grid100/Bayreuth_NO2PredictionPerModel.gpkg')
#Hamburg
grid100_HH = readOGR('C:/Users/foeke/OneDrive/Documenten/submitting paper/TooBigData/Grid100/Hamburg_NO2PredictionPerModel.gpkg')
#Utrecht
grid100_Utrecht = readOGR('C:/Users/foeke/OneDrive/Documenten/submitting paper/TooBigData/Grid100/Utrecht_NO2PredictionPerModel.gpkg')
#to datadrame
grid100_Utrecht_df <- as.data.frame(grid100_Utrecht)
# Add fill layer to nz shape
grid100_Bayreuth <- st_as_sf(grid100_Bayreuth)
grid100_HH <- st_as_sf(grid100_HH)
grid100_Utrecht <- st_as_sf(grid100_Utrecht)
colnames(grid100_Utrecht_df)
#create list with variables to visualize
vars = c("predicted_NO2_RF",       "predicted_NO2_LASSO" ,
"predicted_NO2_RIDGE"  ,  "predicted_NO2_LightGBM" ,"predicted_NO2_XGBoost")
length(vars)
breaks = c(-100, 0, 15, 20, 25, 30, 35, 40, 45, 50, 100, 1000)
#manually define color palette
paleta1 <- c("grey", "palegreen4", "palegreen3","palegreen","greenyellow",  "yellow", "gold", "darkorange", "red", "darkred", "grey")
tm_shape(grid100_Bayreuth) + tm_fill(col = "predicted_NO2_RF", breaks=breaks, palette=paleta1, legend.show = FALSE, width = 1000, height = 500)
tmap_save(map,asp = 1, width = 1000, height = 1000, units="px", filename = "C:/Users/foeke/OneDrive/Documenten/submitting paper/TooBigData/visualization/Bayreuth_TEST1.jpg")
# loop through the shapefiles and create a map for each - Bayreuth
for (i in 1:length(vars)) {
vars[i]
map <- tm_shape(grid100_Bayreuth) + tm_fill(col = vars[i], breaks=breaks, palette=paleta1, legend.show = FALSE)
hi = vars[i]
tmap_save(map, width = 1000, height = 600, units="px", filename = paste("C:/Users/foeke/OneDrive/Documenten/submitting paper/TooBigData/visualization/Bayreuth_",hi,".jpg", sep=""))
}
## == zoomed in version == ##
## == intialize coordinates - area of interest (BAYREUTH) == ##
coor_1 = 11.4869
coor_3 = 11.6627
coor_2 = 49.9868
coor_4 = 49.8991
## == create polygon with coordinates == ##
# automatic option - create own polygon and use for spatial filtering
#filter traffic counting points within bounding box
x_coord = c(coor_1, coor_1, coor_3, coor_3)
y_coord = c(coor_4, coor_2, coor_2, coor_4)
xym <- cbind(x_coord, y_coord)
#transform into spatial polygon
p = Polygon(xym) #create polygon
ps = Polygons(list(p),1) #wrap into a Polygons object
poly = SpatialPolygons(list(ps)) #wrap into a SpatialPolygons object
proj4string(poly) = CRS("+proj=longlat +datum=WGS84 +no_defs +type=crs")
#export option
poly_sf <- st_as_sf(poly)
##  First project data into a planar coordinate system (here 3035)
poly_3035 <- st_transform(poly_sf, crs=3035)
#export option
sf::st_write(poly_3035, dsn="C:/Users/foeke/OneDrive/Documenten/submitting paper/TooBigData/visualization/poly_3035.gpkg", driver = "GPKG")
#spatial query035
sp_query <-spatial.select(poly_3035,y = grid100_Bayreuth,predicate = "contains")
sf::st_write(sp_query, dsn="C:/Users/foeke/OneDrive/Documenten/submitting paper/TooBigData/visualization/Bayreuth/Bayreuth_ZI.gpkg", driver = "GPKG")
#manual option: import Bayreuth ZI (two Bayreuth versions are available: a zoomed out- and zoomed in-version where we use the latter now.
grid100_Bayreuth_ZI = readOGR('C:/Users/foeke/OneDrive/Documenten/submitting paper/TooBigData/visualization/Bayreuth/Bayreuth_ZI.gpkg')
grid100_Bayreuth_ZI
grid100_Bayreuth_ZI
view(grid100_Bayreuth_ZI)
print(grid100_Bayreuth_ZI)
# loop through the shapefiles and create a map for each - Bayreuth
for (i in 1:length(vars)) {
vars[i]
map <- tm_shape(grid100_Bayreuth_ZI) + tm_fill(col = vars[i], breaks=breaks, palette=palette, legend.show = FALSE)
model = vars[i]
tmap_save(map, width = 1000, height = 1000, units="px", filename = paste("C:/Users/foeke/OneDrive/Documenten/submitting paper/TooBigData/visualization/Bayreuth/Bayreuth_ZI_",model,".jpg", sep=""))
}
#manually define color palette
palette <- c("grey", "palegreen4", "palegreen3","palegreen","greenyellow",  "yellow", "gold", "darkorange", "red", "darkred", "grey")
# loop through the shapefiles and create a map for each - Bayreuth
for (i in 1:length(vars)) {
vars[i]
map <- tm_shape(grid100_Bayreuth_ZI) + tm_fill(col = vars[i], breaks=breaks, palette=palette, legend.show = FALSE)
model = vars[i]
tmap_save(map, width = 1000, height = 1000, units="px", filename = paste("C:/Users/foeke/OneDrive/Documenten/submitting paper/TooBigData/visualization/Bayreuth/Bayreuth_ZI_",model,".jpg", sep=""))
}
