library(sfheaders) #converting to multistring
## == DEFINE COORDINATE SYSTEMS == ##
crs <- CRS("+proj=longlat +datum=WGS84") # crs
utmStr <- "+proj=utm +zone=%d +datum=NAD83 +units=m +no_defs +ellps=GRS80"
crs_32 <- CRS(sprintf(utmStr, 32))
### === GERMANY === ###
#import motorways and primary roads in Germany
#NOTE: secondary roads are excluded due to the limited traffic counting stations that are
#situated at secondary roads. Therefore, the results for the secondary roads are prone
#to high uncertainty.
#import motorways and primary roads in Germany
# roads_Germany <- readOGR('C:/Users/foeke/OneDrive/Documenten/submitting paper/All scripts - paper/data/Traffic/Motorway_Primary_Germany.shp')
roads_Germany <- readOGR('C:/Users/foeke/OneDrive/Documenten/submitting paper/testing_script_outputs/Traffic/Motorway_Primary_Germany_selection1.shp')
#make spatia via sf package
roads_Germany_sf <- st_as_sf(roads_Germany)
#decrease dataset size and only keep relevant columns
roads_Germany_sf <- roads_Germany_sf %>% dplyr::select(type, geometry) #type = 'Motorway' or 'Primary'
#assign coordinate reference system, in first instance use WGS84 so that transformation to local crs goes without problems
st_crs(roads_Germany_sf) <- st_crs(crs)
#transform to local crs
roads_Germany_32 <- st_transform(roads_Germany_sf, crs = crs_32)
# #optionally, export
# sf::st_write(roads_Germany_32, dsn='C:/Users/foeke/OneDrive/Documenten/submitting paper/testing_script_outputs/Traffic/roads_Germany_32.shp', driver = "ESRI Shapefile")
#decrease dataset size and only keep relevant columns
roads_Germany_32 <- roads_Germany_32 %>% dplyr::select(type, geometry) #type = 'Motorway' or 'Primary'
## == TRAFFIC DATA == ## (point features)
#Germany traffic data (Jawe) - Average daily traffic (Mo-So), All traffic type, measured over 2017.
Jawe <- readOGR('C:/Users/foeke/OneDrive/Documenten/submitting paper/testing_script_outputs/Traffic/Jawe_processed.shp')
#convert to sf
Jawe_sf <- st_as_sf(Jawe, coords = c("long", "lat"))
#export option
#sf::st_write(spdf, dsn='C:/Users/foeke/OneDrive/Documenten/ArcGIS/Projects/MyProject21/Germany/complete',layer='Jawe_TrafficVolume', driver = "ESRI Shapefile")
# # = potentially: fix geometry issues related to road shapefiles = #
#
# #create new column for filtering purposes
# roads$filter <- ifelse(roads$type=='primary', 0,1 )
#
# #as 'motorway' is "sfc_GEOMETRYCOLLECTION" "sfc", conversion to multistring is necessary.
# motorway <- roads[roads$filter == 1, ]
# #convert from geometry collection to only line
# motorway_line <- st_collection_extract(motorway, "LINESTRING")
#
# #also create seperate dataset for primary roads
# primary <- roads[roads$filter == 0, ]
# #fix geometry issues
# primary = st_make_valid(primary)
#
# #merge datasets
# roads_merge <- rbind(primary, motorway_line)
## == INITIALIZE LOOP AND NECESSARY ELEMENTS == ##
i=1 #set first element that will be used
dis_points = 1000  #points every x meters
bufsize = 20 #in meters - necessary to perform spatial selection as point-to-line operations do not yield reliable results
result_variables = list() #store loop results to list
road_types = c("motorway", "primary") #road types considered
#FOR LOOP
for(i in road_types)
{
#select specific road type
road_type <- roads_Germany_sf[roads_Germany_sf$type == i, ]
#verify
print(i)
## == create extra points == ##
# #convert to class "SpatialLines"
spatial_lines_roadtype <- sf:::as_Spatial(road_type)
proj4string(spatial_lines_roadtype) <- CRS("+proj=longlat +datum=WGS84")
##  First project data into a planar coordinate system (here UTM zone 32)
roads_UTM <- spTransform(spatial_lines_roadtype, CRS = crs_32)
#insert extra points
numOfPoints  <-  gLength(roads_UTM) / dis_points
extra_points <- spsample(roads_UTM, n = numOfPoints, type = "regular")
st_extra_points <- st_as_sf(extra_points) #convert to spatial dataframe
# #convert back to geographic coordination system
# crs_gcs <- 4326 #define desired gcs
# st_extra_points <- st_transform(st_extra_points, crs = crs_gcs) #apply on relevant layer
#export option
layer_ep <- paste('ExtraPoints', i, sep = " ") #################
print(layer_ep)
#sf::st_write(st_extra_points, dsn='C:/Users/foeke/OneDrive/Documenten/submitting paper/testing_script_outputs/Traffic/sample',layer=layer_ep, driver = "ESRI Shapefile")
#SELECT RELEVANT POINTS PER ROAD TYPE
#from the traffic counting stations in the area of interest, select only
#the ones that intersect with motorways
line <- spTransform(spatial_lines_roadtype)
buf <- buffer(line, width = bufsize) #initialized buffer parameter is relevant here.
sf_buf <- st_as_sf(buf) #convert to spatial dataframe to perform spatial operations
sf_pts <- st_as_sf(Jawe_sf)  #convert to spatial dataframe to perform spatial operations
# sf_buf <- st_transform(sf_buf, crs = crs) #apply on relevant layer
Jewe_roadtype <- sf_pts[sf_buf,] #select points that intersect with specific roadtype
## == ASSIGN TRAFFIC COUNTING STATION VALUES TO EXTRA CREATED POINTS == ##
#to get  better coverage, and potentially less skewed results, more point values contain traffic counting station values. Assigning the original traffic counting station
#values to the newly created points will be done in this part of code, depending in the road type(hence "Jewe_roadtype").
#identify nearest point feature to point feature
nearest_points <- st_nearest_feature(st_extra_points, Jewe_roadtype)
#assign traffic values to line dataset, based on nearest distance
trafficval_points_roadtype = cbind(st_extra_points, st_drop_geometry(Jewe_roadtype)[nearest_points,])
## == ASSIGN POINT VALUES TO LINES (ROADS) == ##
#convert relevant variables to spatial dataframes - the now many points containing traffic volume values will be assigned to the closest road segment
sf_line_roadtype <- st_as_sf(road_type)
sf_tv_points_rt <- st_as_sf(trafficval_points_roadtype)
#identify nearest point feature to line feature
nearest_poi_toline <- st_nearest_feature(sf_line_roadtype, sf_tv_points_rt)
#assign traffic values to line dataset, based on nearest distance
linepoi_join = cbind(sf_line_roadtype, st_drop_geometry(sf_tv_points_rt)[nearest_poi_toline,])
#store variable in loop
result_variables[[i]] <- linepoi_join
#export option
layer <- paste('TrafficVolumeGermany2', i, sep = " ")
print(layer)
sf::st_write(linepoi_join, dsn='C:/Users/foeke/OneDrive/Documenten/submitting paper/testing_script_outputs/Traffic/sample',layer=layer, driver = "ESRI Shapefile")
}
line <- spTransform(spatial_lines_roadtype)
line <- spTransform(spatial_lines_roadtype, crs=crs_32)
line <- spTransform(spatial_lines_roadtype, crs_32)
#necessary libraries
library(sf)
library(sfnetworks)
library(tidygraph)
library(tmap)
library(nngeo)
library(osmdata)
library(dplyr)
library(lwgeom)
library(raster)
library(rgdal)
library(utils)
library(ggplot2)
library(rgeos)
library(tidyverse)
library(leaflet) #mapping in OSM
library(bnspatial)
library(gstat)
library(geosphere) #geosphere::dist2Line
library(stars) #for st_rasterize
library(base) #sprintf
library(sfheaders) #converting to multistring
## == DEFINE COORDINATE SYSTEMS == ##
crs <- CRS("+proj=longlat +datum=WGS84") # crs
utmStr <- "+proj=utm +zone=%d +datum=NAD83 +units=m +no_defs +ellps=GRS80"
crs_32 <- CRS(sprintf(utmStr, 32))
### === GERMANY === ###
#import motorways and primary roads in Germany
#NOTE: secondary roads are excluded due to the limited traffic counting stations that are
#situated at secondary roads. Therefore, the results for the secondary roads are prone
#to high uncertainty.
#import motorways and primary roads in Germany
# roads_Germany <- readOGR('C:/Users/foeke/OneDrive/Documenten/submitting paper/All scripts - paper/data/Traffic/Motorway_Primary_Germany.shp')
roads_Germany <- readOGR('C:/Users/foeke/OneDrive/Documenten/submitting paper/testing_script_outputs/Traffic/Motorway_Primary_Germany_selection1.shp')
#make spatia via sf package
roads_Germany_sf <- st_as_sf(roads_Germany)
#decrease dataset size and only keep relevant columns
roads_Germany_sf <- roads_Germany_sf %>% dplyr::select(type, geometry) #type = 'Motorway' or 'Primary'
#assign coordinate reference system, in first instance use WGS84 so that transformation to local crs goes without problems
st_crs(roads_Germany_sf) <- st_crs(crs)
#transform to local crs
roads_Germany_32 <- st_transform(roads_Germany_sf, crs = crs_32)
# #optionally, export
# sf::st_write(roads_Germany_32, dsn='C:/Users/foeke/OneDrive/Documenten/submitting paper/testing_script_outputs/Traffic/roads_Germany_32.shp', driver = "ESRI Shapefile")
#decrease dataset size and only keep relevant columns
roads_Germany_32 <- roads_Germany_32 %>% dplyr::select(type, geometry) #type = 'Motorway' or 'Primary'
## == TRAFFIC DATA == ## (point features)
#Germany traffic data (Jawe) - Average daily traffic (Mo-So), All traffic type, measured over 2017.
Jawe <- readOGR('C:/Users/foeke/OneDrive/Documenten/submitting paper/testing_script_outputs/Traffic/Jawe_processed.shp')
#convert to sf
Jawe_sf <- st_as_sf(Jawe, coords = c("long", "lat"))
#export option
#sf::st_write(spdf, dsn='C:/Users/foeke/OneDrive/Documenten/ArcGIS/Projects/MyProject21/Germany/complete',layer='Jawe_TrafficVolume', driver = "ESRI Shapefile")
# # = potentially: fix geometry issues related to road shapefiles = #
#
# #create new column for filtering purposes
# roads$filter <- ifelse(roads$type=='primary', 0,1 )
#
# #as 'motorway' is "sfc_GEOMETRYCOLLECTION" "sfc", conversion to multistring is necessary.
# motorway <- roads[roads$filter == 1, ]
# #convert from geometry collection to only line
# motorway_line <- st_collection_extract(motorway, "LINESTRING")
#
# #also create seperate dataset for primary roads
# primary <- roads[roads$filter == 0, ]
# #fix geometry issues
# primary = st_make_valid(primary)
#
# #merge datasets
# roads_merge <- rbind(primary, motorway_line)
## == INITIALIZE LOOP AND NECESSARY ELEMENTS == ##
i=1 #set first element that will be used
dis_points = 1000  #points every x meters
bufsize = 20 #in meters - necessary to perform spatial selection as point-to-line operations do not yield reliable results
result_variables = list() #store loop results to list
road_types = c("motorway", "primary") #road types considered
#FOR LOOP
for(i in road_types)
{
#select specific road type
road_type <- roads_Germany_sf[roads_Germany_sf$type == i, ]
#verify
print(i)
## == create extra points == ##
# #convert to class "SpatialLines"
spatial_lines_roadtype <- sf:::as_Spatial(road_type)
proj4string(spatial_lines_roadtype) <- CRS("+proj=longlat +datum=WGS84")
##  First project data into a planar coordinate system (here UTM zone 32)
roads_UTM <- spTransform(spatial_lines_roadtype, CRS = crs_32)
#insert extra points
numOfPoints  <-  gLength(roads_UTM) / dis_points
extra_points <- spsample(roads_UTM, n = numOfPoints, type = "regular")
st_extra_points <- st_as_sf(extra_points) #convert to spatial dataframe
# #convert back to geographic coordination system
# crs_gcs <- 4326 #define desired gcs
# st_extra_points <- st_transform(st_extra_points, crs = crs_gcs) #apply on relevant layer
#export option
layer_ep <- paste('ExtraPoints', i, sep = " ") #################
print(layer_ep)
#sf::st_write(st_extra_points, dsn='C:/Users/foeke/OneDrive/Documenten/submitting paper/testing_script_outputs/Traffic/sample',layer=layer_ep, driver = "ESRI Shapefile")
#SELECT RELEVANT POINTS PER ROAD TYPE
#from the traffic counting stations in the area of interest, select only
#the ones that intersect with motorways
line <- spTransform(spatial_lines_roadtype, crs_32)
buf <- buffer(line, width = bufsize) #initialized buffer parameter is relevant here.
sf_buf <- st_as_sf(buf) #convert to spatial dataframe to perform spatial operations
sf_pts <- st_as_sf(Jawe_sf)  #convert to spatial dataframe to perform spatial operations
# sf_buf <- st_transform(sf_buf, crs = crs) #apply on relevant layer
Jewe_roadtype <- sf_pts[sf_buf,] #select points that intersect with specific roadtype
## == ASSIGN TRAFFIC COUNTING STATION VALUES TO EXTRA CREATED POINTS == ##
#to get  better coverage, and potentially less skewed results, more point values contain traffic counting station values. Assigning the original traffic counting station
#values to the newly created points will be done in this part of code, depending in the road type(hence "Jewe_roadtype").
#identify nearest point feature to point feature
nearest_points <- st_nearest_feature(st_extra_points, Jewe_roadtype)
#assign traffic values to line dataset, based on nearest distance
trafficval_points_roadtype = cbind(st_extra_points, st_drop_geometry(Jewe_roadtype)[nearest_points,])
## == ASSIGN POINT VALUES TO LINES (ROADS) == ##
#convert relevant variables to spatial dataframes - the now many points containing traffic volume values will be assigned to the closest road segment
sf_line_roadtype <- st_as_sf(road_type)
sf_tv_points_rt <- st_as_sf(trafficval_points_roadtype)
#identify nearest point feature to line feature
nearest_poi_toline <- st_nearest_feature(sf_line_roadtype, sf_tv_points_rt)
#assign traffic values to line dataset, based on nearest distance
linepoi_join = cbind(sf_line_roadtype, st_drop_geometry(sf_tv_points_rt)[nearest_poi_toline,])
#store variable in loop
result_variables[[i]] <- linepoi_join
#export option
layer <- paste('TrafficVolumeGermany2', i, sep = " ")
print(layer)
sf::st_write(linepoi_join, dsn='C:/Users/foeke/OneDrive/Documenten/submitting paper/testing_script_outputs/Traffic/sample',layer=layer, driver = "ESRI Shapefile")
}
crs(st_extra_points)
crs(sf_tv_points_rt)
crs(sf_line_roadtype)
sf_line_roadtype <- st_transform(sf_line_roadtype, crs=crs_32)
#necessary libraries
library(sf)
library(sfnetworks)
library(tidygraph)
library(tmap)
library(nngeo)
library(osmdata)
library(dplyr)
library(lwgeom)
library(raster)
library(rgdal)
library(utils)
library(ggplot2)
library(rgeos)
library(tidyverse)
library(leaflet) #mapping in OSM
library(bnspatial)
library(gstat)
library(geosphere) #geosphere::dist2Line
library(stars) #for st_rasterize
library(base) #sprintf
library(sfheaders) #converting to multistring
## == DEFINE COORDINATE SYSTEMS == ##
crs <- CRS("+proj=longlat +datum=WGS84") # crs
utmStr <- "+proj=utm +zone=%d +datum=NAD83 +units=m +no_defs +ellps=GRS80"
crs_32 <- CRS(sprintf(utmStr, 32))
### === GERMANY === ###
#import motorways and primary roads in Germany
#NOTE: secondary roads are excluded due to the limited traffic counting stations that are
#situated at secondary roads. Therefore, the results for the secondary roads are prone
#to high uncertainty.
#import motorways and primary roads in Germany
# roads_Germany <- readOGR('C:/Users/foeke/OneDrive/Documenten/submitting paper/All scripts - paper/data/Traffic/Motorway_Primary_Germany.shp')
roads_Germany <- readOGR('C:/Users/foeke/OneDrive/Documenten/submitting paper/testing_script_outputs/Traffic/Motorway_Primary_Germany_selection1.shp')
#make spatia via sf package
roads_Germany_sf <- st_as_sf(roads_Germany)
#decrease dataset size and only keep relevant columns
roads_Germany_sf <- roads_Germany_sf %>% dplyr::select(type, geometry) #type = 'Motorway' or 'Primary'
#assign coordinate reference system, in first instance use WGS84 so that transformation to local crs goes without problems
st_crs(roads_Germany_sf) <- st_crs(crs)
#transform to local crs
roads_Germany_32 <- st_transform(roads_Germany_sf, crs = crs_32)
# #optionally, export
# sf::st_write(roads_Germany_32, dsn='C:/Users/foeke/OneDrive/Documenten/submitting paper/testing_script_outputs/Traffic/roads_Germany_32.shp', driver = "ESRI Shapefile")
#decrease dataset size and only keep relevant columns
roads_Germany_32 <- roads_Germany_32 %>% dplyr::select(type, geometry) #type = 'Motorway' or 'Primary'
## == TRAFFIC DATA == ## (point features)
#Germany traffic data (Jawe) - Average daily traffic (Mo-So), All traffic type, measured over 2017.
Jawe <- readOGR('C:/Users/foeke/OneDrive/Documenten/submitting paper/testing_script_outputs/Traffic/Jawe_processed.shp')
#convert to sf
Jawe_sf <- st_as_sf(Jawe, coords = c("long", "lat"))
#export option
#sf::st_write(spdf, dsn='C:/Users/foeke/OneDrive/Documenten/ArcGIS/Projects/MyProject21/Germany/complete',layer='Jawe_TrafficVolume', driver = "ESRI Shapefile")
# # = potentially: fix geometry issues related to road shapefiles = #
#
# #create new column for filtering purposes
# roads$filter <- ifelse(roads$type=='primary', 0,1 )
#
# #as 'motorway' is "sfc_GEOMETRYCOLLECTION" "sfc", conversion to multistring is necessary.
# motorway <- roads[roads$filter == 1, ]
# #convert from geometry collection to only line
# motorway_line <- st_collection_extract(motorway, "LINESTRING")
#
# #also create seperate dataset for primary roads
# primary <- roads[roads$filter == 0, ]
# #fix geometry issues
# primary = st_make_valid(primary)
#
# #merge datasets
# roads_merge <- rbind(primary, motorway_line)
## == INITIALIZE LOOP AND NECESSARY ELEMENTS == ##
i=1 #set first element that will be used
dis_points = 1000  #points every x meters
bufsize = 20 #in meters - necessary to perform spatial selection as point-to-line operations do not yield reliable results
result_variables = list() #store loop results to list
road_types = c("motorway", "primary") #road types considered
#FOR LOOP
for(i in road_types)
{
#select specific road type
road_type <- roads_Germany_sf[roads_Germany_sf$type == i, ]
#verify
print(i)
## == create extra points == ##
# #convert to class "SpatialLines"
spatial_lines_roadtype <- sf:::as_Spatial(road_type)
proj4string(spatial_lines_roadtype) <- CRS("+proj=longlat +datum=WGS84")
##  First project data into a planar coordinate system (here UTM zone 32)
roads_UTM <- spTransform(spatial_lines_roadtype, CRS = crs_32)
#insert extra points
numOfPoints  <-  gLength(roads_UTM) / dis_points
extra_points <- spsample(roads_UTM, n = numOfPoints, type = "regular")
st_extra_points <- st_as_sf(extra_points) #convert to spatial dataframe
# #convert back to geographic coordination system
# crs_gcs <- 4326 #define desired gcs
# st_extra_points <- st_transform(st_extra_points, crs = crs_gcs) #apply on relevant layer
#export option
layer_ep <- paste('ExtraPoints', i, sep = " ") #################
print(layer_ep)
#sf::st_write(st_extra_points, dsn='C:/Users/foeke/OneDrive/Documenten/submitting paper/testing_script_outputs/Traffic/sample',layer=layer_ep, driver = "ESRI Shapefile")
#SELECT RELEVANT POINTS PER ROAD TYPE
#from the traffic counting stations in the area of interest, select only
#the ones that intersect with motorways
line <- spTransform(spatial_lines_roadtype, crs_32)
buf <- buffer(line, width = bufsize) #initialized buffer parameter is relevant here.
sf_buf <- st_as_sf(buf) #convert to spatial dataframe to perform spatial operations
sf_pts <- st_as_sf(Jawe_sf)  #convert to spatial dataframe to perform spatial operations
# sf_buf <- st_transform(sf_buf, crs = crs) #apply on relevant layer
Jewe_roadtype <- sf_pts[sf_buf,] #select points that intersect with specific roadtype
## == ASSIGN TRAFFIC COUNTING STATION VALUES TO EXTRA CREATED POINTS == ##
#to get  better coverage, and potentially less skewed results, more point values contain traffic counting station values. Assigning the original traffic counting station
#values to the newly created points will be done in this part of code, depending in the road type(hence "Jewe_roadtype").
#identify nearest point feature to point feature
nearest_points <- st_nearest_feature(st_extra_points, Jewe_roadtype)
#assign traffic values to line dataset, based on nearest distance
trafficval_points_roadtype = cbind(st_extra_points, st_drop_geometry(Jewe_roadtype)[nearest_points,])
## == ASSIGN POINT VALUES TO LINES (ROADS) == ##
#convert relevant variables to spatial dataframes - the now many points containing traffic volume values will be assigned to the closest road segment
sf_line_roadtype <- st_as_sf(road_type)
sf_line_roadtype <- st_transform(sf_line_roadtype, crs=crs_32)
sf_tv_points_rt <- st_as_sf(trafficval_points_roadtype)
#identify nearest point feature to line feature
nearest_poi_toline <- st_nearest_feature(sf_line_roadtype, sf_tv_points_rt)
#assign traffic values to line dataset, based on nearest distance
linepoi_join = cbind(sf_line_roadtype, st_drop_geometry(sf_tv_points_rt)[nearest_poi_toline,])
#store variable in loop
result_variables[[i]] <- linepoi_join
#export option
layer <- paste('TrafficVolumeGermany2', i, sep = " ")
print(layer)
sf::st_write(linepoi_join, dsn='C:/Users/foeke/OneDrive/Documenten/submitting paper/testing_script_outputs/Traffic/sample',layer=layer, driver = "ESRI Shapefile")
}
#necessary libraries
library(sf)
library(sfnetworks)
library(tidygraph)
library(tmap)
library(nngeo)
library(osmdata)
library(dplyr)
library(lwgeom)
library(raster)
library(rgdal)
library(utils)
library(ggplot2)
library(rgeos)
library(tidyverse)
library(leaflet) #mapping in OSM
library(bnspatial)
library(gstat)
library(geosphere) #geosphere::dist2Line
library(stars) #for st_rasterize
library(base) #sprintf
library(sfheaders) #converting to multistring
## == DEFINE COORDINATE SYSTEMS == ##
crs <- CRS("+proj=longlat +datum=WGS84") # crs
utmStr <- "+proj=utm +zone=%d +datum=NAD83 +units=m +no_defs +ellps=GRS80"
crs_32 <- CRS(sprintf(utmStr, 32))
### === GERMANY === ###
#import motorways and primary roads in Germany
#NOTE: secondary roads are excluded due to the limited traffic counting stations that are
#situated at secondary roads. Therefore, the results for the secondary roads are prone
#to high uncertainty.
#import motorways and primary roads in Germany
# roads_Germany <- readOGR('C:/Users/foeke/OneDrive/Documenten/submitting paper/All scripts - paper/data/Traffic/Motorway_Primary_Germany.shp')
roads_Germany <- readOGR('C:/Users/foeke/OneDrive/Documenten/submitting paper/testing_script_outputs/Traffic/Motorway_Primary_Germany_selection1.shp')
#make spatia via sf package
roads_Germany_sf <- st_as_sf(roads_Germany)
#decrease dataset size and only keep relevant columns
roads_Germany_sf <- roads_Germany_sf %>% dplyr::select(type, geometry) #type = 'Motorway' or 'Primary'
#assign coordinate reference system, in first instance use WGS84 so that transformation to local crs goes without problems
st_crs(roads_Germany_sf) <- st_crs(crs)
#transform to local crs
roads_Germany_32 <- st_transform(roads_Germany_sf, crs = crs_32)
# #optionally, export
# sf::st_write(roads_Germany_32, dsn='C:/Users/foeke/OneDrive/Documenten/submitting paper/testing_script_outputs/Traffic/roads_Germany_32.shp', driver = "ESRI Shapefile")
#decrease dataset size and only keep relevant columns
roads_Germany_32 <- roads_Germany_32 %>% dplyr::select(type, geometry) #type = 'Motorway' or 'Primary'
## == TRAFFIC DATA == ## (point features)
#Germany traffic data (Jawe) - Average daily traffic (Mo-So), All traffic type, measured over 2017.
Jawe <- readOGR('C:/Users/foeke/OneDrive/Documenten/submitting paper/testing_script_outputs/Traffic/Jawe_processed.shp')
#convert to sf
Jawe_sf <- st_as_sf(Jawe, coords = c("long", "lat"))
#export option
#sf::st_write(spdf, dsn='C:/Users/foeke/OneDrive/Documenten/ArcGIS/Projects/MyProject21/Germany/complete',layer='Jawe_TrafficVolume', driver = "ESRI Shapefile")
# # = potentially: fix geometry issues related to road shapefiles = #
#
# #create new column for filtering purposes
# roads$filter <- ifelse(roads$type=='primary', 0,1 )
#
# #as 'motorway' is "sfc_GEOMETRYCOLLECTION" "sfc", conversion to multistring is necessary.
# motorway <- roads[roads$filter == 1, ]
# #convert from geometry collection to only line
# motorway_line <- st_collection_extract(motorway, "LINESTRING")
#
# #also create seperate dataset for primary roads
# primary <- roads[roads$filter == 0, ]
# #fix geometry issues
# primary = st_make_valid(primary)
#
# #merge datasets
# roads_merge <- rbind(primary, motorway_line)
## == INITIALIZE LOOP AND NECESSARY ELEMENTS == ##
i=1 #set first element that will be used
dis_points = 1000  #points every x meters
bufsize = 10 #in meters - necessary to perform spatial selection as point-to-line operations do not yield reliable results
result_variables = list() #store loop results to list
road_types = c("motorway", "primary") #road types considered
#FOR LOOP
for(i in road_types)
{
#select specific road type
road_type <- roads_Germany_sf[roads_Germany_sf$type == i, ]
#verify
print(i)
## == create extra points == ##
# #convert to class "SpatialLines"
spatial_lines_roadtype <- sf:::as_Spatial(road_type)
proj4string(spatial_lines_roadtype) <- CRS("+proj=longlat +datum=WGS84")
##  First project data into a planar coordinate system (here UTM zone 32)
roads_UTM <- spTransform(spatial_lines_roadtype, CRS = crs_32)
#insert extra points
numOfPoints  <-  gLength(roads_UTM) / dis_points
extra_points <- spsample(roads_UTM, n = numOfPoints, type = "regular")
st_extra_points <- st_as_sf(extra_points) #convert to spatial dataframe
# #convert back to geographic coordination system
# crs_gcs <- 4326 #define desired gcs
# st_extra_points <- st_transform(st_extra_points, crs = crs_gcs) #apply on relevant layer
#export option
layer_ep <- paste('ExtraPoints', i, sep = " ") #################
print(layer_ep)
#sf::st_write(st_extra_points, dsn='C:/Users/foeke/OneDrive/Documenten/submitting paper/testing_script_outputs/Traffic/sample',layer=layer_ep, driver = "ESRI Shapefile")
#SELECT RELEVANT POINTS PER ROAD TYPE
#from the traffic counting stations in the area of interest, select only
#the ones that intersect with motorways
line <- spTransform(spatial_lines_roadtype, crs_32)
buf <- buffer(line, width = bufsize) #initialized buffer parameter is relevant here.
sf_buf <- st_as_sf(buf) #convert to spatial dataframe to perform spatial operations
sf_pts <- st_as_sf(Jawe_sf)  #convert to spatial dataframe to perform spatial operations
# sf_buf <- st_transform(sf_buf, crs = crs) #apply on relevant layer
Jewe_roadtype <- sf_pts[sf_buf,] #select points that intersect with specific roadtype
## == ASSIGN TRAFFIC COUNTING STATION VALUES TO EXTRA CREATED POINTS == ##
#to get  better coverage, and potentially less skewed results, more point values contain traffic counting station values. Assigning the original traffic counting station
#values to the newly created points will be done in this part of code, depending in the road type(hence "Jewe_roadtype").
#identify nearest point feature to point feature
nearest_points <- st_nearest_feature(st_extra_points, Jewe_roadtype)
#assign traffic values to line dataset, based on nearest distance
trafficval_points_roadtype = cbind(st_extra_points, st_drop_geometry(Jewe_roadtype)[nearest_points,])
## == ASSIGN POINT VALUES TO LINES (ROADS) == ##
#convert relevant variables to spatial dataframes - the now many points containing traffic volume values will be assigned to the closest road segment
sf_line_roadtype <- st_as_sf(road_type)
sf_line_roadtype <- st_transform(sf_line_roadtype, crs=crs_32)
sf_tv_points_rt <- st_as_sf(trafficval_points_roadtype)
#identify nearest point feature to line feature
nearest_poi_toline <- st_nearest_feature(sf_line_roadtype, sf_tv_points_rt)
#assign traffic values to line dataset, based on nearest distance
linepoi_join = cbind(sf_line_roadtype, st_drop_geometry(sf_tv_points_rt)[nearest_poi_toline,])
#store variable in loop
result_variables[[i]] <- linepoi_join
#export option
layer <- paste('TrafficVolumeGermany3', i, sep = " ")
print(layer)
sf::st_write(linepoi_join, dsn='C:/Users/foeke/OneDrive/Documenten/submitting paper/testing_script_outputs/Traffic/sample',layer=layer, driver = "ESRI Shapefile")
}
